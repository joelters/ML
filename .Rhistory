mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.RF","SL.XGB"))
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.RF","SL.XGB"))
undebug(modest)
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.RF","SL.XGB"))
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.RF","SL.XGB"))
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.RF","SL.XGB"))
?SuperLearner
libary(SuperLearner)
library(SuperLearner)
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.RF","SL.XGB"))
View(m1)
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.RF","SL.XGB"))
?glmnet
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
View(m1)
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
?SL.glmnet
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
?glmnet
debug(modest)
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
debug(modest)
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
undebug(modest)
m1 <- modest(model.matrix(~.,X),Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(model.matrix(~.,X),Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL", ensemble = c("SL.Lasso","SL.XGB"))
View(m1)
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.Ridge","SL.RF","SL.CIF","SL.XGB","SL.CB"))
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.lm2"))
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.Ridge","SL.RF",
"SL.CIF","SL.XGB","SL.CB"))
View(m1)
View(m1)
m <- lm(Y~.,mad)
coef(m)
FV <- predict(m)
sum(is.na(FV))
FV <- predict(m, X[1:5,])
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.lm2"))
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.lm2"))
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.lm2"))
rm(list = ls())
mad <- mad2019[1:500,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.lm2"))
rm(list = ls())
mad <- mad2019[1:1000,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.lm2"))
rm(list = ls())
mad <- mad2019[1:2000,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.lm2"))
rm(list = ls())
mad <- mad2019[1:2000,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"XGB")
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "XGB")
rm(list = ls())
mad <- mad2019[1:2000,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"XGB")
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "XGB")
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:2000,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"XGB")
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "XGB")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"XGB")
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "XGB")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("Lasso","XGB"))
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "SL")
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.XGB"))
rm(list = ls())
mad <- mad2019[1:300,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.XGB"))
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "SL")
rm(list = ls())
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.Ridge","SL.RF","SL.CIF","SL.XGB","SL.CB"))
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "SL")
?sl
library(SuperLearner)
?sl
??sl
devtools::load_all(".")
rm(list = ls())
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.Ridge","SL.RF","SL.CIF","SL.XGB","SL.CB"))
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "SL")
class(FV1)
devtools::document()
devtools::load_all(".")
?FVest
devtools::document()
devtools::load_all(".")
?FVest
usethis::use_test("FVest")
class(1:10)
class(c(1:10))
expect_vector(1:10, ptype = integer(), size = 10))
expect_vector(1:10, ptype = integer(), size = 10)
expect_vector(1:10, ptype = integer(), size = 1)
expect_vector(c(1.2,3.5), ptype = numeric(), size = 2)
devtools::load_all(".")
devtools::load_all(".")
expect_vector(FV1, ptype = double[,1], size = 5)
test_that("Lasso has no error and gives vector of correct length", {
m <- modest(X,Y,"Lasso")
expect_no_error(FV1 <- FVest(m,X,Y,X[1:5,],Y[1:5],ML = "Lasso"))
expect_no_error(FV2 <- FVest(m,X,Y,ML = "Lasso"))
expect_vector(FV1, ptype = double[,1], size = 5)
expect_vector(FV2, ptype = numeric(), size = nrow(X))
})
class(FV1)
length(FV1)
expect_length(FV1, 5)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
debug(FVest)
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.Ridge","SL.RF","SL.CIF","SL.XGB","SL.CB"))
rm(list = ls())
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.XGB"))
debug(FVest)
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "SL")
?SuperLearner
rm(list = ls())
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.CB"))
debug(FVest)
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "SL")
rm(list = ls())
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
m1 <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.Ridge","SL.RF",
"SL.CIF","SL.XGB","SL.CB"))
debug(FVest)
FV1 <- FVest(m1,X,Y,X[1:5,],Y[1:5],ML = "SL")
?SuperLearner
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
expect_no_error(m <- modest(X,Y,"SL",
ensemble = c("SL.Lasso","SL.Ridge","SL.RF",
"SL.CIF","SL.XGB","SL.CB")))
expect_s3_class(m, "SuperLearner")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
debug(test)
debug(devtools::test)
devtools::test()
Q
Q
Q
devtools::load_all(".")
?FVest
devtools::document()
devtools::load_all(".")
?MLest
devtools::load_all(".")
?MLest
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
?MLest
usethis::use_test("MLest")
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
mm <- MLest(X,Y,"RF")
View(m)
View(mm)
length(mm[[2]])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?predicr
?predict
?model.matrix
?gaussian
?SL.cforest
devtools::load_all(".")
devtools::load_all(".")
use_mit_license()
usethis::use_mit_license()
devtools::load_all(".")
install()
devtools::install()
install("ML")
devtools::install("ML")
devtools::load_all(".")
install()
library(ML)
devtools::load_all(".")
?SL.ranger
devtools::load_all(".")
?SL.cforest
devtools::load_all(".")
?cforest
?party::cforest
?cforest_unbiased
?SL.cforest
devtools::load_all(".")
devtools::load_all(".")
devtools::install_github("joelters/ML")
?modest
?MLest
devtools::install_github("joelters/ML")
library(pkgndep)
install.packages("pkgndep")
library(pkgndep)
pkg = pkgndep("ML")
install.packages("BiocVersion")
sessionInfo()
?SuperLearner::SuperLearner
devtools::load_all(".")
?modest
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
modest(X[1:400,],Y[1:400],"CB")
locate ML.Rproj
0.33*11
100:10:200
ngrid <- seq(100,3000, 100)
ngrid <- seq(100,3000, 100)
sim <- lapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)
})
View(sim)
ngrid <- seq(100,3000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)
})
ngrid <- seq(100,3000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)
},1)
plot(sim)
plot(ngrid,a)
plot(ngrid,sim)
ngrid <- seq(100,10000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)},1)
plot(ngrid,sim)
ngrid <- seq(100,100000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)},1)
plot(ngrid,sim)
library(devtools)
usethis::use_r("MLcv")
n <- 1:100
Kcv = 4
ind <- split(seq(n), seq(n) %% Kcv)
View(ind)
Y <- rnorm(n)
X <- runif(n)
n <- length(Y)
X <- dplyr::as_tibble(X)
ind <- split(seq(n), seq(n) %% Kcv)
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
ML = c("RF","XGB")
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
fv <- rep(0,n)
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
res
unlist(res)
names(res) <- ML
res
unlist(res)
min(unlist(res))
names(unlist(res)[which.min(unlist(res))])
#' Perform CV on list of machine learners
#'
#' `MLcv` computes cross-validated RMSE for a list including up to
#' Lasso, Ridge,
#' Random Forest, Conditional Inference Forest,
#' Extreme Gradient Boosting and Catboosting. Returns ML with minimum
#' RMSE and the RMSE.
#'
#' @param X is a dataframe containing all the features on which the
#' model was estimated
#' @param Y is a vector containing the labels for which the model
#' was estimated
#' @param ML string vector specifying which machine learners to use
#' @param Kcv number of folds
#' @returns list containing ML attaining minimum RMSE and RMSE
#'
#'
#' @export
MLcv <- function(X,
Y,
ML = c("Lasso","Ridge","RF","CIF","XGB","CB"),
Kcv = 5){
n <- length(Y)
X <- dplyr::as_tibble(X)
ind <- split(seq(n), seq(n) %% Kcv)
fv <- rep(0,n)
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
names(res) <- ML
res <- unlist(res)
return(list(mlbest = names(res[which.min(res)]),
rmse = min(res)))
}
MLcv(X,Y,ML)
library(devtools)
document()
install()
library(ranger)
?ranger
library(cforest)
library(party)
?cforest
?ranger
rm(list = ls())
library(devtools)
load_all()
m <- MLest(X,Y,ML = "RF",rf.cf.ntree = 3, rf.depth = 1)
rm(list = ls())
library(devtools)
load_all()
n <- 1000
X <- rnorm(n)
eps <- rnorm(n)
Y <- X + eps
m <- MLest(X,Y,ML = "RF",rf.cf.ntree = 3, rf.depth = 1)
fvs <- m$FVs
unique(fvs)
devtools::load_all()
devtools::document()
devtools::load()
devtools::load_all()
devtools::document()
