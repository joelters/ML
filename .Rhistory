fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(maxdepth = 5, ntree = 50, mtry = 2))
# Check the structure
print(fit)
tree <- fit@ensemble[[1]]  # This is a plain list tree
get_depth_from_raw_tree <- function(node) {
if (is.null(node$left) && is.null(node$right)) return(1)
left_depth <- if (!is.null(node$left)) get_depth_from_raw_tree(node$left) else 0
right_depth <- if (!is.null(node$right)) get_depth_from_raw_tree(node$right) else 0
return(1 + max(left_depth, right_depth))
}
# Apply to the first tree
get_depth_from_raw_tree(tree)
depths <- sapply(fit@ensemble, get_depth_from_raw_tree)
summary(depths)
library(party)
library(partykit)
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(minbucket = 5, ntree = 50, mtry = 2))
# Check the structure
print(fit)
tree <- fit@ensemble[[1]]  # This is a plain list tree
get_depth_from_raw_tree <- function(node) {
if (is.null(node$left) && is.null(node$right)) return(1)
left_depth <- if (!is.null(node$left)) get_depth_from_raw_tree(node$left) else 0
right_depth <- if (!is.null(node$right)) get_depth_from_raw_tree(node$right) else 0
return(1 + max(left_depth, right_depth))
}
# Apply to the first tree
get_depth_from_raw_tree(tree)
depths <- sapply(fit@ensemble, get_depth_from_raw_tree)
summary(depths)
library(party)
library(partykit)
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(minbucket = 1, ntree = 50, mtry = 2))
# Check the structure
print(fit)
tree <- fit@ensemble[[1]]  # This is a plain list tree
get_depth_from_raw_tree <- function(node) {
if (is.null(node$left) && is.null(node$right)) return(1)
left_depth <- if (!is.null(node$left)) get_depth_from_raw_tree(node$left) else 0
right_depth <- if (!is.null(node$right)) get_depth_from_raw_tree(node$right) else 0
return(1 + max(left_depth, right_depth))
}
# Apply to the first tree
get_depth_from_raw_tree(tree)
depths <- sapply(fit@ensemble, get_depth_from_raw_tree)
summary(depths)
library(party)
library(partykit)
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(minbucket = 1, ntree = 50, mtry = 2,
mincriterion = 0))
# Check the structure
print(fit)
tree <- fit@ensemble[[1]]  # This is a plain list tree
get_depth_from_raw_tree <- function(node) {
if (is.null(node$left) && is.null(node$right)) return(1)
left_depth <- if (!is.null(node$left)) get_depth_from_raw_tree(node$left) else 0
right_depth <- if (!is.null(node$right)) get_depth_from_raw_tree(node$right) else 0
return(1 + max(left_depth, right_depth))
}
# Apply to the first tree
get_depth_from_raw_tree(tree)
depths <- sapply(fit@ensemble, get_depth_from_raw_tree)
summary(depths)
ct <- ctree(Species ~ ., data = iris,
controls = ctree_control(minbucket = 1, mincriterion = 0))
# Let's inspect this tree visually
plot(ct)
ct <- ctree(Species ~ ., data = iris,
controls = ctree_control(minbucket = 1, mincriterion = 0.01))
library(party)
library(partykit)
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(minbucket = 1, ntree = 50, mtry = 2,
mincriterion = 0))
# Check the structure
print(fit)
# Convert a tree from the ensemble to a plottable form
tree <- partykit::as.constparty(fit@ensemble[[1]])
# Build a single decision tree (not a forest)
tree_model <- ctree(Species ~ ., data = iris,
controls = ctree_control(minbucket = 1, mincriterion = 0))
library(party)
library(partykit)
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(minbucket = 1, ntree = 50, mtry = 2,
mincriterion = 0))
# Check the structure
print(fit)
# Convert a tree from the ensemble to a plottable form
tree <- partykit::as.constparty(fit@ensemble[[1]])
# Build a single decision tree (not a forest)
tree_model <- ctree(Species ~ ., data = iris,
control = ctree_control(minbucket = 1, mincriterion = 0))
# Plot it
plot(tree_model)
# Build a single decision tree (not a forest)
tree_model <- ctree(Species ~ ., data = iris,
control = ctree_control(minbucket = 6, mincriterion = 0))
# Plot it
plot(tree_model)
# Build a single decision tree (not a forest)
tree_model <- ctree(Species ~ ., data = iris,
control = ctree_control(minbucket = 50, mincriterion = 0))
# Plot it
plot(tree_model)
?partykit::cforest
Inf
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("CIF")
m = modest(X,Y,ML=ML,cf.depth = 1, mtry = 2, rf.cf.ntree = 5)
debug(modest)
m = modest(X,Y,ML=ML,cf.depth = 1, mtry = 2, rf.cf.ntree = 5)
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("CIF")
m = modest(X,Y,ML=ML,cf.depth = 1, mtry = 2, rf.cf.ntree = 5)
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("CIF")
m = modest(X,Y,ML=ML, cf.depth = 1, mtry = 2, rf.cf.ntree = 5)
m = modest(X,Y,ML=ML, cf.depth = 1, mtry = 2, rf.cf.ntree = 500)
m = modest(X,Y,ML=ML, cf.depth = 1, mtry = 2, rf.cf.ntree = 5000)
m = modest(X,Y,ML=ML, cf.depth = 1, mtry = 2, rf.cf.ntree = 500)
m = modest(X,Y,ML=ML, cf.depth = 6, mtry = 2, rf.cf.ntree = 500)
Inf == Inf
`%notin%` <- Negate(`%in%`)
Inf %notin% c(1,2,3)
Inf %notin% c(1,2,3, Inf)
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("CIF")
m = modest(X,Y,ML=ML, cf.depth = 6, mtry = 2, rf.cf.ntree = 500)
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 500
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("CIF")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 500)
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 500
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("CIF")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm = MLest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm$FVs
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), cf.depth.grid = c(1,2),
rf.cf.ntree.grid = c(30, 50), verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = 1 + X1 + X2
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
a = c(1,2,Inf)
a
if(Inf %in% a){a[which(a == Inf)] = NULL}
if(Inf %in% a){a[which(a == Inf)] = NULL}
which(a == Inf)
a[which(a == Inf)]
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 500
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("CIF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), cf.depth.grid = c(1,2),
rf.cf.ntree.grid = c(30, 50), verbose = TRUE)
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), cf.depth.grid = c(1,Inf),
rf.cf.ntree.grid = c(30, 50), verbose = TRUE)
log(exp)
log(exp(1))
log(exp(5))
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 500
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 500
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 100 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
n = 500
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
m$coefficients
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
m$coefficients
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
m$coefficients
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm = MLest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm$FVs[1:10]
mcv <- MLtuning(X,Y,ML = ML, polynomial.loglin.grid = c(1,2), verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = 1 + X1 + X2
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm = MLest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mcv <- MLtuning(X,Y,ML = ML, polynomial.loglin.grid = c(1,2), verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = 1 + X1 + X2
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)*0.1
Y = exp(1 + X1 + X2 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm = MLest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mcv <- MLtuning(X,Y,ML = ML, polynomial.loglin.grid = c(1,2), verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = 1 + X1 + X2
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)*0.1
Y = exp(1 + X1 + X2 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm = MLest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mcv <- MLtuning(X,Y,ML = ML, polynomial.loglin.grid = c(1,2), verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = exp(1 + X1 + X2)
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2 + eps)
X = data.frame(X1 = X1, X2 = X2)
ML = c("loglin")
m = modest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mm = MLest(X,Y,ML=ML, cf.depth = 2, mtry = 2, rf.cf.ntree = 50)
mcv <- MLtuning(X,Y,ML = ML, polynomial.loglin.grid = c(1,2), verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = exp(1 + X1 + X2)
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
