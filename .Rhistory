Q
Q
devtools::load_all(".")
?FVest
devtools::document()
devtools::load_all(".")
?MLest
devtools::load_all(".")
?MLest
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
?MLest
usethis::use_test("MLest")
mad <- mad2019[1:250,]
X <- dplyr::select(mad,-Y)
Y <- mad$Y
mm <- MLest(X,Y,"RF")
View(m)
View(mm)
length(mm[[2]])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?predicr
?predict
?model.matrix
?gaussian
?SL.cforest
devtools::load_all(".")
devtools::load_all(".")
use_mit_license()
usethis::use_mit_license()
devtools::load_all(".")
install()
devtools::install()
install("ML")
devtools::install("ML")
devtools::load_all(".")
install()
library(ML)
devtools::load_all(".")
?SL.ranger
devtools::load_all(".")
?SL.cforest
devtools::load_all(".")
?cforest
?party::cforest
?cforest_unbiased
?SL.cforest
devtools::load_all(".")
devtools::load_all(".")
devtools::install_github("joelters/ML")
?modest
?MLest
devtools::install_github("joelters/ML")
library(pkgndep)
install.packages("pkgndep")
library(pkgndep)
pkg = pkgndep("ML")
install.packages("BiocVersion")
sessionInfo()
?SuperLearner::SuperLearner
devtools::load_all(".")
?modest
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
modest(X[1:400,],Y[1:400],"CB")
locate ML.Rproj
0.33*11
100:10:200
ngrid <- seq(100,3000, 100)
ngrid <- seq(100,3000, 100)
sim <- lapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)
})
View(sim)
ngrid <- seq(100,3000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)
})
ngrid <- seq(100,3000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)
},1)
plot(sim)
plot(ngrid,a)
plot(ngrid,sim)
ngrid <- seq(100,10000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)},1)
plot(ngrid,sim)
ngrid <- seq(100,100000, 100)
sim <- vapply(ngrid, function(u){
X <- rnorm(u)
a <- sqrt(u)*mean(X)},1)
plot(ngrid,sim)
library(devtools)
usethis::use_r("MLcv")
n <- 1:100
Kcv = 4
ind <- split(seq(n), seq(n) %% Kcv)
View(ind)
Y <- rnorm(n)
X <- runif(n)
n <- length(Y)
X <- dplyr::as_tibble(X)
ind <- split(seq(n), seq(n) %% Kcv)
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
ML = c("RF","XGB")
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
fv <- rep(0,n)
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
res
unlist(res)
names(res) <- ML
res
unlist(res)
min(unlist(res))
names(unlist(res)[which.min(unlist(res))])
#' Perform CV on list of machine learners
#'
#' `MLcv` computes cross-validated RMSE for a list including up to
#' Lasso, Ridge,
#' Random Forest, Conditional Inference Forest,
#' Extreme Gradient Boosting and Catboosting. Returns ML with minimum
#' RMSE and the RMSE.
#'
#' @param X is a dataframe containing all the features on which the
#' model was estimated
#' @param Y is a vector containing the labels for which the model
#' was estimated
#' @param ML string vector specifying which machine learners to use
#' @param Kcv number of folds
#' @returns list containing ML attaining minimum RMSE and RMSE
#'
#'
#' @export
MLcv <- function(X,
Y,
ML = c("Lasso","Ridge","RF","CIF","XGB","CB"),
Kcv = 5){
n <- length(Y)
X <- dplyr::as_tibble(X)
ind <- split(seq(n), seq(n) %% Kcv)
fv <- rep(0,n)
res <- lapply(ML,function(u){
for (i in 1:Kcv){
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
rmse <- sqrt(mean((Y-fv)^2))
})
names(res) <- ML
res <- unlist(res)
return(list(mlbest = names(res[which.min(res)]),
rmse = min(res)))
}
MLcv(X,Y,ML)
library(devtools)
document()
install()
library(ranger)
?ranger
library(cforest)
library(party)
?cforest
?ranger
rm(list = ls())
library(devtools)
load_all()
m <- MLest(X,Y,ML = "RF",rf.cf.ntree = 3, rf.depth = 1)
rm(list = ls())
library(devtools)
load_all()
n <- 1000
X <- rnorm(n)
eps <- rnorm(n)
Y <- X + eps
m <- MLest(X,Y,ML = "RF",rf.cf.ntree = 3, rf.depth = 1)
fvs <- m$FVs
unique(fvs)
devtools::load_all()
devtools::document()
devtools::load()
devtools::load_all()
devtools::document()
aa <- data.frame(a = c(1,2))
names(Aa)
names(aa)
bb <- data.frame(b = c(1,3))
names(aa) == names(bb)
devtools::load_all()
devtools::document()
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
m1 <- modest(X,Y,"RF")
debug(modest)
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
m1 <- modest(X,Y,"RF")
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
m1 <- modest(X,Y,"RF")
class(X)
class(X) %in% "data.frame"
"data.frame" %in% class(X)
"data.frame" %notin% class(X)
"data.frame" %in% class(X)
!("data.frame" %in% class(X))
devtools::load_all()
devtools::document()
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
m1 <- modest(X,Y,"RF")
m1$forest$independent.variable.names
legnth(m1$forest$independent.variable.names)
length(m1$forest$independent.variable.names)
length(m1$forest$independent.variable.names[1])
aa <- c("a", "b")
bb <- c("a", "c")
aa != bb
all(aa != bb)
!all(aa != bb)
cc <- c("a", "b")
!all(aa != cc)
!all(aa == cc)
!all(aa == bb)
library(devtools)
aa = paste("SL.",c("Lasso","RF"), sep = "")
aa
X = rnorm(1000)
Y = X + rnorm(1000)
n <- length(Y)
ind <- split(seq(n), seq(n) %% Kcv)
OLSensemblefolds = 2
ind <- split(seq(n), seq(n) %% OLSensemblefolds)
View(ind)
as.data.frame(matrix(rep(NA,9),3,3))
as.data.frame(matrix(rep(NA,12),4,3))
ensemble = c("RF","CB")
dfpred = as.data.frame(matrix(rep(NA,n*length(ensemble)),n,length(ensemble)))
X = data.frame(X)
u = "RF"
document()
mm = ML::modest(X[-ind[[ii]],],Y[-ind[[ii]]],ML = u)
ii = 1
mm = ML::modest(X[-ind[[ii]],],Y[-ind[[ii]]],ML = u)
aa = X[-ind[[ii]],]
rf.cf.ntree = 500
polynomial = 2
rf.depth = NULL
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial)
pred = ML::FVest(mm,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u,
polynomial = polynomial)
pred = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial)
pred = rep(NA,n)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial)
ind[[ii]][1:5]
pred[1:5]
pred[1:10]
names(dfpred) = ensemble
dfpred = as.data.frame(matrix(rep(NA,n*length(ensemble)),n,length(ensemble)))
names(dfpred) = ensemble
pred = rep(NA,n)
for (ii in 1:OLSensemblefolds){
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial)
}
res = sapply(ensemble, function(u){
dfpred = as.data.frame(matrix(rep(NA,n*length(ensemble)),n,length(ensemble)))
names(dfpred) = ensemble
pred = rep(NA,n)
for (ii in 1:OLSensemblefolds){
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial)
}
dfpred[,u] = pred
})
Y <- as.numeric(Y)
ML = match.arg(ML)
dta <- dplyr::as_tibble(cbind(Y = Y,X))
colnames(dta)[1] <- "Y"
if (!("data.frame" %in% class(X))){
X <- data.frame(X)
}
u = "CB"
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial)
X = data.frame(X, rnorm(n))
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial)
document()
library(devtools)
document()
X = data.frame(rnorm(1000),rnorm(1000))
Y = X%*%c(1,1) + rnorm(1000)
X = matrix(c(rnorm(1000),rnorm(1000)),1000,2)
Y = X%*%c(1,1) + rnorm(1000)
X = as.data.frame(X)
ensemble = c("RF","CB"),
ensemble = c("RF","CB"),
ensemble = c("RF","CB")
rf.cf.ntree = 500
rf.depth = NULL
polynomial = 1
OLSensemblefolds = 2
n <- length(Y)
ind <- split(seq(n), seq(n) %% OLSensemblefolds)
res = sapply(ensemble, function(u){
dfpred = as.data.frame(matrix(rep(NA,n*length(ensemble)),n,length(ensemble)))
names(dfpred) = ensemble
pred = rep(NA,n)
for (ii in 1:OLSensemblefolds){
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
weights = weights)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial,
weight = weights)
}
dfpred[,u] = pred
})
Y <- as.numeric(Y)
dta <- dplyr::as_tibble(cbind(Y = Y,X))
colnames(dta)[1] <- "Y"
if (!("data.frame" %in% class(X))){
X <- data.frame(X)
}
n <- length(Y)
ind <- split(seq(n), seq(n) %% OLSensemblefolds)
res = sapply(ensemble, function(u){
dfpred = as.data.frame(matrix(rep(NA,n*length(ensemble)),n,length(ensemble)))
names(dfpred) = ensemble
pred = rep(NA,n)
for (ii in 1:OLSensemblefolds){
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
weights = weights)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial,
weight = weights)
}
dfpred[,u] = pred
})
weights = NULL
n <- length(Y)
ind <- split(seq(n), seq(n) %% OLSensemblefolds)
res = sapply(ensemble, function(u){
dfpred = as.data.frame(matrix(rep(NA,n*length(ensemble)),n,length(ensemble)))
names(dfpred) = ensemble
pred = rep(NA,n)
for (ii in 1:OLSensemblefolds){
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
weights = weights)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial,
weight = weights)
}
dfpred[,u] = pred
})
n <- length(Y)
ind <- split(seq(n), seq(n) %% OLSensemblefolds)
res = sapply(ensemble, function(u){
dfpred = as.data.frame(matrix(rep(NA,n*length(ensemble)),n,length(ensemble)))
names(dfpred) = ensemble
pred = rep(NA,n)
for (ii in 1:OLSensemblefolds){
mm = ML::modest(X[-ind[[ii]],], Y[-ind[[ii]]], ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
weights = weights)
pred[ind[[ii]]] = ML::FVest(mm,X[-ind[[ii]],],Y[-ind[[ii]]],
X[ind[[ii]],],Y[ind[[ii]]],ML = u,
polynomial = polynomial)
}
dfpred[,u] = pred
})
View(res)
dfpred = as.data.frame(res)
View(dfpred)
dfens = data.frame(Y = Y,dfpred)
View(dfens)
ols = lm(Y~., data = dfens)
summary(ols)
ols$coefficients
coefs = ols$coefficients
ms = lapply(ensemble, function(u){
ML::modest(X, Y, ML = u,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
weights = weights)
})
names(ms) = ensemble
View(ms)
ensemble = names(ms)
u = "RF"
ms$u
ms[u]
ms$RF
ms[u] == ms$RF
Xpred = matrix(rep(NA,n,length(ensemble)))
Xpred = matrix(rep(NA,n*length(ensemble)),n,length(ensemble))
?FVest
for (ii in 1:length(ensemble)){
Xpred[,ii] = ML::FVest(ms[[ii]], X, Y, Xnew, Ynew,
ML = ensemble[ii],polynomial = polynomial)
}
Xnew = matrix(c(rnorm(500),rnorm(500)),500,2)
Ynew = Xnew%*%c(1,1) + rnorm(500)
Xnew = as.data.frame(Xnew)
for (ii in 1:length(ensemble)){
Xpred[,ii] = ML::FVest(ms[[ii]], X, Y, Xnew, Ynew,
ML = ensemble[ii],polynomial = polynomial)
}
FVs = Xpred%*%coefs
Xpred = matrix(rep(NA,n*(length(ensemble)+1)),n,length(ensemble)+1)
Xpred = cbind(rep(1,nnew),Xpred)
nnew = length(Ynew)
ensemble = names(ms)
Xpred = matrix(rep(NA,nnew*length(ensemble)),nnew,length(ensemble))
for (ii in 1:length(ensemble)){
Xpred[,ii] = ML::FVest(ms[[ii]], X, Y, Xnew, Ynew,
ML = ensemble[ii],polynomial = polynomial)
}
Xpred = cbind(rep(1,nnew),Xpred)
View(Xpred)
FVs = Xpred%*%coefs
class(ms)
class(coefs)
document()
document()
?modest
rm(list = ls())
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
modest(X,Y,"OLSensemble")
document()
rm(list = ls())
X <- dplyr::select(mad2019,-Y)
Y <- mad2019$Y
modest(X,Y,"OLSensemble")
debug(modest)
modest(X,Y,"OLSensemble")
modest(X,Y,"OLSensemble")
modest(X,Y,"RF")
