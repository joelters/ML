rf.cf.ntree.grid = rf.cf.ntree.grid,
rf.depth.grid = rf.depth.grid,
mtry.grid = mtry.grid,
polynomial.grid = polynomial.grid,
xgb.nrounds.grid = xgb.nrounds.grid,
xgb.max.depth.grid = xgb.max.depth.grid)
a$results_best[[1]]
})
}
})
names(res) <- ML
resbest = lapply(res, function(u){
u[which.min(u$rmse),]
})
best.across.ML = resbest[[which.min(sapply(resbest,function(u){u$rmse}))]]
return(list(results = res,
results_best = resbest,
best.across.ml = best.across.ML))
}
res0 = lapply(OLSensemble, function(v){
a = MLtuning(X = X,
Y = Y,
ML = v,
Kcv = Kcv,
rf.cf.ntree.grid = rf.cf.ntree.grid,
rf.depth.grid = rf.depth.grid,
mtry.grid = mtry.grid,
polynomial.grid = polynomial.grid,
xgb.nrounds.grid = xgb.nrounds.grid,
xgb.max.depth.grid = xgb.max.depth.grid)
a$results_best[[1]]
})
res0
names(res0) = OLSensemble
res0
OLSensemble = c("Lasso","RF")
res0 = lapply(OLSensemble, function(v){
a = MLtuning(X = X,
Y = Y,
ML = v,
Kcv = Kcv,
rf.cf.ntree.grid = rf.cf.ntree.grid,
rf.depth.grid = rf.depth.grid,
mtry.grid = mtry.grid,
polynomial.grid = polynomial.grid,
xgb.nrounds.grid = xgb.nrounds.grid,
xgb.max.depth.grid = xgb.max.depth.grid)
a$results_best[[1]]
})
names(res0) = OLSensemble
res0
assign("aa",3)
for (jt in 1:length(res0)){
aux = ncol(res0[[jt]]) - 2
for (jr in 1:aux){
assign(colnames(res0[[jt]])[jr],res0[[jt]][1,jr])
}
}
rm(polynomial)
remove(rf.cf.ntree)
remove(rf.depth)
remove(mtry)
for (jt in 1:length(res0)){
aux = ncol(res0[[jt]]) - 2
for (jr in 1:aux){
assign(colnames(res0[[jt]])[jr],res0[[jt]][1,jr])
}
}
ls()
"polynomial" %in% ls()
"polynomial" %notin% ls()
`%notin%` <- Negate(`%in%`)
"polynomial" %notin% ls()
res0 = lapply(OLSensemble, function(v){
a = MLtuning(X = X,
Y = Y,
ML = v,
Kcv = Kcv,
rf.cf.ntree.grid = rf.cf.ntree.grid,
rf.depth.grid = rf.depth.grid,
mtry.grid = mtry.grid,
polynomial.grid = polynomial.grid,
xgb.nrounds.grid = xgb.nrounds.grid,
xgb.max.depth.grid = xgb.max.depth.grid)
a$results_best[[1]]
})
res0
for (jt in 1:length(res0)){
aux = ncol(res0[[jt]]) - 2
for (jr in 1:aux){
assign(colnames(res0[[jt]])[jr],res0[[jt]][1,jr])
}
}
`%notin%` <- Negate(`%in%`)
if ("polynomial" %notin% ls()){
polynomial = 1
}
if ("rf.cf.ntree" %notin% ls()){
rf.cf.ntree = 500
}
if ("rf.depth" %notin% ls() | rf.depth == 23101995){
rf.depth = NULL
}
if ("mtry" %notin% ls()){
mtry = 1
}
if ("xgb.nrounds" %notin% ls()){
xgb.nrounds = 200
}
if ("xgb.max.depth" %notin% ls()){
xgb.max.depth = 6
}
combs = expand.grid(ensemblefolds.grid)
names(combs) = c("ensemblefolds")
res = lapply(1:nrow(combs),function(j){
ensemblefolds = combs$ensemblefolds[j]
fv <- rep(0,n)
for (i in 1:Kcv){
if (verbose == TRUE){
print(paste("Fold ",i, " of ", Kcv, " of ML ",u, sep = ""))
}
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u,
OLSensemble = OLSensemble,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
mt = mtry,
xgb.nrounds = xgb.nrounds,
xgb.max.depth = xgb.max.depth)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
data.frame(ML = u, rmse = sqrt(mean((Y-fv)^2)))
})
res = do.call(rbind,res)
res = data.frame(combs,res)
res
u
u == "OLSensemble"
u = "OLSensemble"
res0 = lapply(OLSensemble, function(v){
a = MLtuning(X = X,
Y = Y,
ML = v,
Kcv = Kcv,
rf.cf.ntree.grid = rf.cf.ntree.grid,
rf.depth.grid = rf.depth.grid,
mtry.grid = mtry.grid,
polynomial.grid = polynomial.grid,
xgb.nrounds.grid = xgb.nrounds.grid,
xgb.max.depth.grid = xgb.max.depth.grid)
a$results_best[[1]]
})
res0
for (jt in 1:length(res0)){
aux = ncol(res0[[jt]]) - 2
for (jr in 1:aux){
assign(colnames(res0[[jt]])[jr],res0[[jt]][1,jr])
}
}
u
`%notin%` <- Negate(`%in%`)
if ("polynomial" %notin% ls()){
polynomial = 1
}
if ("rf.cf.ntree" %notin% ls()){
rf.cf.ntree = 500
}
if ("rf.depth" %notin% ls() | rf.depth == 23101995){
rf.depth = NULL
}
if ("mtry" %notin% ls()){
mtry = 1
}
if ("xgb.nrounds" %notin% ls()){
xgb.nrounds = 200
}
if ("xgb.max.depth" %notin% ls()){
xgb.max.depth = 6
}
combs = expand.grid(ensemblefolds.grid)
names(combs) = c("ensemblefolds")
ensemblefolds.grid = c(1,2)
combs = expand.grid(ensemblefolds.grid)
names(combs) = c("ensemblefolds")
res = lapply(1:nrow(combs),function(j){
ensemblefolds = combs$ensemblefolds[j]
fv <- rep(0,n)
for (i in 1:Kcv){
if (verbose == TRUE){
print(paste("Fold ",i, " of ", Kcv, " of ML ",u, sep = ""))
}
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u,
OLSensemble = OLSensemble,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
mt = mtry,
xgb.nrounds = xgb.nrounds,
xgb.max.depth = xgb.max.depth)
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u)
}
data.frame(ML = u, rmse = sqrt(mean((Y-fv)^2)))
})
?FVest
u
res0 = lapply(OLSensemble, function(v){
a = MLtuning(X = X,
Y = Y,
ML = v,
Kcv = Kcv,
rf.cf.ntree.grid = rf.cf.ntree.grid,
rf.depth.grid = rf.depth.grid,
mtry.grid = mtry.grid,
polynomial.grid = polynomial.grid,
xgb.nrounds.grid = xgb.nrounds.grid,
xgb.max.depth.grid = xgb.max.depth.grid)
a$results_best[[1]]
})
for (jt in 1:length(res0)){
aux = ncol(res0[[jt]]) - 2
for (jr in 1:aux){
assign(colnames(res0[[jt]])[jr],res0[[jt]][1,jr])
}
}
`%notin%` <- Negate(`%in%`)
if ("polynomial" %notin% ls()){
polynomial = 1
}
if ("rf.cf.ntree" %notin% ls()){
rf.cf.ntree = 500
}
if ("rf.depth" %notin% ls() | rf.depth == 23101995){
rf.depth = NULL
}
if ("mtry" %notin% ls()){
mtry = 1
}
if ("xgb.nrounds" %notin% ls()){
xgb.nrounds = 200
}
if ("xgb.max.depth" %notin% ls()){
xgb.max.depth = 6
}
combs = expand.grid(ensemblefolds.grid)
names(combs) = c("ensemblefolds")
res = lapply(1:nrow(combs),function(j){
ensemblefolds = combs$ensemblefolds[j]
fv <- rep(0,n)
for (i in 1:Kcv){
if (verbose == TRUE){
print(paste("Fold ",i, " of ", Kcv, " of ML ",u, sep = ""))
}
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u,
OLSensemble = OLSensemble,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
mt = mtry,
xgb.nrounds = xgb.nrounds,
xgb.max.depth = xgb.max.depth)
coefs = m$coefs
m = m$models
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u,
coefs = coefs)
}
data.frame(ML = u, rmse = sqrt(mean((Y-fv)^2)))
})
res = lapply(1:nrow(combs),function(j){
ensemblefolds = combs$ensemblefolds[j]
fv <- rep(0,n)
for (i in 1:Kcv){
if (verbose == TRUE){
print(paste("Fold ",i, " of ", Kcv, " of ML ",u, sep = ""))
}
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u,
OLSensemble = OLSensemble,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
mt = mtry,
xgb.nrounds = xgb.nrounds,
xgb.max.depth = xgb.max.depth)
coefs = m$coefs
m = m$models
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u,
polynomial = polynomial,
coefs = coefs)
}
data.frame(ML = u, rmse = sqrt(mean((Y-fv)^2)))
})
res = do.call(rbind,res)
res = data.frame(combs,res)
res
if (1 %in% ensemblefolds.grid){
stop(ensemblefolds has to be an integer larger than 1)
if (1 %in% ensemblefolds.grid){
stop("ensemblefolds has to be an integer larger than 1")
}
ensemblefolds = c(2,3)
combs = expand.grid(ensemblefolds.grid)
names(combs) = c("ensemblefolds")
res = lapply(1:nrow(combs),function(j){
ensemblefolds = combs$ensemblefolds[j]
fv <- rep(0,n)
for (i in 1:Kcv){
if (verbose == TRUE){
print(paste("Fold ",i, " of ", Kcv, " of ML ",u, sep = ""))
}
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u,
OLSensemble = OLSensemble,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
mt = mtry,
xgb.nrounds = xgb.nrounds,
xgb.max.depth = xgb.max.depth)
coefs = m$coefs
m = m$models
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u,
polynomial = polynomial,
coefs = coefs)
}
data.frame(ML = u, rmse = sqrt(mean((Y-fv)^2)))
})
res = do.call(rbind,res)
res = data.frame(combs,res)
res
ensemblefolds.grid = c(2,3)
combs = expand.grid(ensemblefolds.grid)
names(combs) = c("ensemblefolds")
res = lapply(1:nrow(combs),function(j){
ensemblefolds = combs$ensemblefolds[j]
fv <- rep(0,n)
for (i in 1:Kcv){
if (verbose == TRUE){
print(paste("Fold ",i, " of ", Kcv, " of ML ",u, sep = ""))
}
m <- ML::modest(X[-ind[[i]],],Y[-ind[[i]]],ML = u,
OLSensemble = OLSensemble,
rf.cf.ntree = rf.cf.ntree,
rf.depth = rf.depth,
polynomial = polynomial,
mt = mtry,
xgb.nrounds = xgb.nrounds,
xgb.max.depth = xgb.max.depth)
coefs = m$coefs
m = m$models
fv[ind[[i]]] <- ML::FVest(m,X[-ind[[i]],],Y[-ind[[i]]],
X[ind[[i]],],Y[ind[[i]]],ML = u,
polynomial = polynomial,
coefs = coefs)
}
data.frame(ML = u, rmse = sqrt(mean((Y-fv)^2)))
})
res = do.call(rbind,res)
res = data.frame(combs,res)
res
library(devtools)
document()
# ensemble = c("RF","CB")
# rf.cf.ntree = 500
# rf.depth = NULL
# polynomial = 1
# OLSensemblefolds = 2
# weights = NULL
#
# Xnew = matrix(c(rnorm(500),rnorm(500)),500,2)
# Ynew = Xnew%*%c(1,1) + rnorm(500)
# Xnew = as.data.frame(Xnew)
set.seed(123)  # Same seed for reproducibility
X <- as.data.frame(matrix(rnorm(1000), ncol = 10))  # 100 rows, 10 features
Y <- as.matrix(X)%*%rep(1,10) + rnorm(100)  # Response variable
?MLtuning
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
debug(MLtuning)
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
document()
undebug(MLtuning)
library(devtools)
document()
# Xnew = as.data.frame(Xnew)
set.seed(123)  # Same seed for reproducibility
X <- as.data.frame(matrix(rnorm(1000), ncol = 10))  # 100 rows, 10 features
Y <- as.matrix(X)%*%rep(1,10) + rnorm(100)  # Response variable
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
res
library(devtools)
document()
X <- as.data.frame(matrix(rnorm(1000), ncol = 10))  # 100 rows, 10 features
Y <- as.matrix(X)%*%rep(1,10) + rnorm(100)  # Response variable
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
library(devtools)
document()
set.seed(123)  # Same seed for reproducibility
X <- as.data.frame(matrix(rnorm(1000), ncol = 10))  # 100 rows, 10 features
Y <- as.matrix(X)%*%rep(1,10) + rnorm(100)  # Response variable
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
library(devtools)
document()
set.seed(123)  # Same seed for reproducibility
X <- as.data.frame(matrix(rnorm(1000), ncol = 10))  # 100 rows, 10 features
Y <- as.matrix(X)%*%rep(1,10) + rnorm(100)  # Response variable
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
library(devtools)
document()
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
OLSensemble
restuning
restuning[[1]]
restuning[[1]][which.min(restuning[[1]]$rmse)]
restuning[[1]][which.min(restuning[[1]]$rmse),]
library(devtools)
document()
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
restuning
restuning
res0
restuning
library(devtools)
document()
set.seed(123)  # Same seed for reproducibility
X <- as.data.frame(matrix(rnorm(1000), ncol = 10))  # 100 rows, 10 features
Y <- as.matrix(X)%*%rep(1,10) + rnorm(100)  # Response variable
a = MLtuning(X,Y,ML = c("Lasso","RF","XGB","OLSensemble"),
OLSensemble = c("Lasso","RF","XGB"),
rf.cf.ntree.grid = c(100, 300, 500),
rf.depth.grid = c(2, 4, 6, 10),
mtry.grid = c(1, 3, 5),
ensemblefolds.grid = c(2, 5),
polynomial.grid = c(1, 2, 3),
xgb.nrounds.grid = c(100, 200, 500),
xgb.max.depth.grid = c(1, 3, 6))
a$results
a$best.across.ml
