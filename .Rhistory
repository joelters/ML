library(devtools)
document()
# X = matrix(c(rnorm(1000),rnorm(1000)),1000,2)
# Y = X%*%c(1,1) + rnorm(1000)
# X = as.data.frame(X)
#
# ensemble = c("RF","CB")
# rf.cf.ntree = 500
# rf.depth = NULL
# polynomial = 1
# OLSensemblefolds = 2
# weights = NULL
#
# Xnew = matrix(c(rnorm(500),rnorm(500)),500,2)
# Ynew = Xnew%*%c(1,1) + rnorm(500)
# Xnew = as.data.frame(Xnew)
set.seed(123)  # Same seed for reproducibility
X <- as.data.frame(matrix(rnorm(1000), ncol = 10))  # 100 rows, 10 features
Y <- as.matrix(X)%*%rep(1,10) + rnorm(100)  # Response variable
#
# m = MLest(X,Y,ML = "OLSensemble", OLSensemble = c("RF","XGB"))
# fvs = FVest(model = m,X = X,Y = Y,Xnew = X[1:3,],Ynew = Y[1:3],ML = "OLSensemble", coefs = m$coefs)
# mlcv = MLcv(X,Y,ML = c("Lasso", "Ridge", "OLS"),
#             polynomial.Lasso = 2,
#             polynomial.Ridge = 3,
#             polynomial.OLS = 1,
#             verbose = TRUE)
mltuning = MLtuning(X,Y,ML = c("Lasso", "Ridge", "OLS"),
polynomial.Lasso.grid = c(1,2),
polynomial.Ridge = c(1,2),
polynomial.OLS = c(1,2),
verbose = TRUE)
mltuning
document()
devtools::document()
rm(list = ls())
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
rm(list = ls())
library(devtools)
document()
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(res)
rm(list = ls())
library(devtools)
document()
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(res)
rm(list = ls())
library(devtools)
document()
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(resMLrmse)
View(fvs)
res
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(res)
View(restuning)
restuning[[1]]
rm(list = ls())
library(devtools)
document()
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(restuning)
document()
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
rm(list = ls())
library(devtools)
document()
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
aa = restuning[[1]]
aa$res
aa$rmse
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
resbest
resbest[[which.min(sapply(resbest,function(u){u$rmse}))]]
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(resbest)
resbest$Lasso[[1]]
resbest$Lasso[[2]]
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
debug(MLtuning)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(best.across.ML)
best.across.ML[[1]]
rm(list = ls())
library(devtools)
document()
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = "Lasso", Kcv = 2)
View(mt)
mt$best.across.ml
mt$results
mt$results_best
mt$fvs_best
mt$best.fvs.across.ml
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = c("Lasso","Ridge","RF"), Kcv = 2)
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = c("Lasso","Ridge","RF"), mtry.grid = 1, Kcv = 2)
mt$best.across.ml
mt$results
mt$results_best
mt$fvs_best
mt$best.fvs.across.ml
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
View(dfpl)
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(df, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = c("RF","XGB"), mtry.grid = 1, Kcv = 2)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
mt = MLtuning(X,Y, ML = c("RF","XGB","CIF","CB"), mtry.grid = 1, Kcv = 2)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("OLSensemble","Lasso", "RF", "XGB")
OLSensemble = c("Lasso", "RF", "XGB")
mt = MLtuning(X,Y, ML = c("RF","XGB","CIF","CB"), mtry.grid = 1, Kcv = 2)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
mt$results_best
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("OLSensemble","Lasso", "RF", "XGB")
OLSensemble = c("Lasso", "RF", "XGB")
mt = MLtuning(X,Y, ML = ML, OLSensmble = OLSensemble, mtry.grid = 1, Kcv = 2)
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("OLSensemble","Lasso", "RF", "XGB")
OLSensemble = c("Lasso", "RF", "XGB")
mt = MLtuning(X,Y, ML = ML, OLSensemble = OLSensemble,
mtry.grid = 1, Kcv = 2, verbose = TRUE)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
mt$results_best
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("OLSensemble","Lasso", "RF", "XGB")
OLSensemble = c("RF", "XGB")
mt = MLtuning(X,Y, ML = ML, OLSensemble = OLSensemble,
mtry.grid = 1, Kcv = 2, verbose = TRUE)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 200
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("OLSensemble", "RF", "XGB")
OLSensemble = c("RF", "XGB")
mt = MLtuning(X,Y, ML = ML, OLSensemble = OLSensemble,
mtry.grid = 1, Kcv = 2, verbose = TRUE)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
mt$results_best
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 500
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("OLSensemble", "RF", "XGB")
OLSensemble = c("RF", "XGB")
mt = MLtuning(X,Y, ML = ML, OLSensemble = OLSensemble,
mtry.grid = 1, Kcv = 2, verbose = TRUE)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
mt$results_best
rm(list = ls())
library(devtools)
document()
set.seed(123)
n = 1000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("OLSensemble", "RF", "XGB")
OLSensemble = c("RF", "XGB")
mt = MLtuning(X,Y, ML = ML, OLSensemble = OLSensemble,
mtry.grid = 1, Kcv = 2, verbose = TRUE)
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
