# fvs <- FVest(m,X,Y,X[1:5,], Y, ML = "Torch")
mm <- modest(X, Y, ML = "NLLS_exp")
coef(mm)
aa <- FVest(mm,X,Y,X, Y, ML = "NLLS_exp")
Gini(exp(1 + X1 + X2))
Gini(aa)
bb = MLest(X, Y, ML = "NLLS_exp")
coef(bb$model)
matrix(1:9,3,3)
matrix(1:9,3,3)*c(1,2,1)
rm(list = ls())
library(devtools)
document()
# set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2) + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), var_penalization = 2, verbose = TRUE)
mcv$results_best
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2) + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), var_penalization = 2, verbose = TRUE)
mcv$results_best
?MLtuning
var(mcv$fvs_best)
var(as.numeric(mcv$fvs_best))
mcv$best.fvs.across.ml
class(mcv$fvs_best)
aaa = mcv$fvs_best
View(aaa)
aaa = mcv$best.fvs.across.ml
var(as.numeric(mcv$best.fvs.across.ml))
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2) + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), var_penalization = 2, verbose = TRUE)
mcv$results_best
var(as.numeric(mcv$best.fvs.across.ml))
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2) + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), var_penalization = 2, verbose = TRUE)
mcv$results_best
var(as.numeric(mcv$best.fvs.across.ml))
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mt$best.fvs.across.ml)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mcv$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = exp(1 + X1 + X2) + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), var_penalization = 0, verbose = TRUE)
mcv$results_best
var(as.numeric(mcv$best.fvs.across.ml))
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mcv$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), var_penalization = 0, verbose = TRUE)
mcv$results_best
var(as.numeric(mcv$best.fvs.across.ml))
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = X1 + X2, fvs = mcv$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
dfpl = data.frame(fvs0 = 1 + X1 + X2, fvs = mcv$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), var_penalization = 2, verbose = TRUE)
mcv$results_best
var(as.numeric(mcv$best.fvs.across.ml))
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = 1 + X1 + X2, fvs = mcv$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
mt$best.across.ml
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), rf.cf.ntree.grid = c(300, 500, 800), var_penalization = 2, verbose = TRUE)
mcv$results_best
var(as.numeric(mcv$best.fvs.across.ml))
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = 1 + X1 + X2, fvs = mcv$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), rf.cf.ntree.grid = c(300, 500, 800), var_penalization = 0.2, verbose = TRUE)
mcv$results_best
var(as.numeric(mcv$best.fvs.across.ml))
# Load required library
library(ggplot2)
library(dplyr)
dfpl = data.frame(fvs0 = 1 + X1 + X2, fvs = mcv$best.fvs.across.ml)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
fvs = as.numeric(mcv$best.fvs.across.ml)
fvs0 = 1 + X1 + X2
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), rf.cf.ntree.grid = c(300, 500, 800), var_penalization = 0, verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = 1 + X1 + X2
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), rf.cf.ntree.grid = c(300, 500, 800), var_penalization = 0.9, verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = 1 + X1 + X2
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
ML = c("RF")
mcv <- MLtuning(X,Y,ML = ML, mtry = c(1,2), rf.depth.grid = c(1,2,4), rf.cf.ntree.grid = c(300, 500, 800), var_penalization = 0.1, verbose = TRUE)
mcv$results_best
fvs = as.numeric(mcv$best.fvs.across.ml)
var(fvs)
# Load required library
library(ggplot2)
library(dplyr)
fvs0 = 1 + X1 + X2
dfpl = data.frame(fvs0 = fvs0, fvs = fvs)
# Order the data by fvs0
dfpl <- dfpl %>%
arrange(fvs0) %>%
mutate(index = row_number())
# Create the ggplot
ggplot(dfpl, aes(x = index)) +
geom_line(aes(y = fvs0, color = "fvs0"), size = 1) +
geom_line(aes(y = fvs, color = "fvs"), size = 1) +
labs(title = "Ordered Data Plot",
x = "Index",
y = "Values",
color = "Legend") +
theme_minimal()
# sign accuracy
n1 = n-1
sgnacc <- sapply(1:n1, function(uu){
uu1 <- uu + 1
aaa = (fvs[uu] > fvs[uu1:n]) - (fvs[uu] < fvs[uu1:n]) !=
(fvs0[uu] > fvs0[uu1:n]) - (fvs0[uu] < fvs0[uu1:n])
})
mean(unlist(sgnacc))
mcv$results_best$RF$rmse
mcv$best.across.ml$rmse
mcv$results_best[[1]]
library(party)
?cforest
rm(list = ls())
library(devtools)
document()
set.seed(1)
n = 5000
X1 = rnorm(n)
X2 = rnorm(n)
eps = rnorm(n)
Y = 1 + X1 + X2 + eps
X = data.frame(X1 = X1, X2 = X2)
dff = data.frame(Y = Y, X)
dta = dff
weights = NULL
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree),
weights = weights)
mtry = 2
ntree = 50
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree),
weights = weights)
rf.cf.ntree = 50
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree),
weights = weights)
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree,
maxdepth = 2),
weights = weights)
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree,
maxdepth = 0),
weights = weights)
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree,
maxdepth = -3),
weights = weights)
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree,
maxdepth = 1),
weights = weights)
model
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree,
maxdepth = 1),
weights = weights)
model <- party::cforest(Y ~ .,
data = dta,
controls = party::cforest_unbiased(mtry = mtry,
ntree = rf.cf.ntree,
maxdepth = 6),
weights = weights)
args(party::cforest_control)
args(party::cforest_unbiased)
party::cforest_unbiased
party::cforest_control
formals(party::cforest_control)
library(party)
# Generate a simple tree with depth constraint
fit <- cforest(Species ~ .,
data = iris,
controls = cforest_control(maxdepth = 1, ntree = 1))
# Check the structure
print(fit)
plot(fit@ensemble[[1]])  # Plot the first tree in the forest
party::plot.party(fit@ensemble[[1]])
plot(fit@ensemble[[1]], type = "simple")
tree <- as.party(fit@ensemble[[1]])
library(party)
library(partykit)
install.packages("partykit")
library(party)
library(partykit)
# Generate a simple tree with depth constraint
fit <- cforest(Species ~ .,
data = iris,
controls = cforest_control(maxdepth = 1, ntree = 1))
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(maxdepth = 1, ntree = 1))
library(party)
library(partykit)
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(maxdepth = 1, ntree = 1))
# Generate a simple tree with depth constraint
fit <- party::cforest(Species ~ .,
data = iris,
controls = cforest_control(maxdepth = 1, ntree = 1, mtry = 2))
# Check the structure
print(fit)
tree <- as.party(fit@ensemble[[1]])
tree <- partykit::as.party(fit@ensemble[[1]])
tree <- partykit::tree <- as.constparty(fit@ensemble[[1]])
